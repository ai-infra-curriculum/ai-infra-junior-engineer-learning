name: Validate Code

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy pytest pytest-cov
        # Install project dependencies if they exist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Check code formatting with Black
      run: |
        black --check --diff --color .
      continue-on-error: false

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional --warn-unused-ignores || true
      continue-on-error: true

    - name: Run tests
      run: |
        pytest tests/ --verbose --color=yes --tb=short || true
      continue-on-error: true

    - name: Validate Python syntax
      run: |
        find . -name "*.py" -type f -exec python -m py_compile {} \;

    - name: Check for TODO comments in stubs
      run: |
        echo "Checking for TODO comments in stub files..."
        if find projects -name "*.py" -path "*/stubs/*" -type f | xargs grep -L "TODO" | grep .; then
          echo "Warning: Some stub files are missing TODO comments"
        else
          echo "All stub files contain TODO comments"
        fi
      continue-on-error: true

    - name: Generate validation report
      if: always()
      run: |
        echo "## Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "**Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Validation completed" >> $GITHUB_STEP_SUMMARY
