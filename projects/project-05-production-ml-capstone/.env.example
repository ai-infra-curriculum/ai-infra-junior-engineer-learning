# Environment Configuration Template
# ==================================
# This file serves as a template for environment-specific configuration.
# Copy this file to create environment-specific .env files:
#   - .env.development (for local development)
#   - .env.staging (for staging environment)
#   - .env.production (for production environment)
#
# NEVER commit actual .env files to Git! Only commit this .env.example template.

# ==============================================================================
# ENVIRONMENT
# ==============================================================================

# Environment name: development, staging, production
ENVIRONMENT=development

# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================

# Application port
PORT=5000

# Log level: DEBUG, INFO, WARN, ERROR
LOG_LEVEL=INFO

# Log format: text, json
LOG_FORMAT=json

# ==============================================================================
# ML MODEL CONFIGURATION
# ==============================================================================

# Model name (as registered in MLflow)
MODEL_NAME=image-classifier

# Model version: specific version number, "latest", or stage name ("Production", "Staging")
MODEL_VERSION=latest

# Model framework: pytorch, tensorflow, sklearn
MODEL_FRAMEWORK=pytorch

# ==============================================================================
# MLFLOW CONFIGURATION
# ==============================================================================

# MLflow tracking server URI
MLFLOW_TRACKING_URI=http://localhost:5000

# MLflow experiment name
MLFLOW_EXPERIMENT_NAME=development-experiments

# MLflow model registry URI (usually same as tracking URI)
MLFLOW_REGISTRY_URI=http://localhost:5000

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# PostgreSQL connection (for MLflow backend store)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=mlflow
DB_USER=mlflow
DB_PASSWORD=changeme_in_production

# Connection pool settings
DB_POOL_SIZE=10
DB_MAX_OVERFLOW=20
DB_POOL_TIMEOUT=30

# ==============================================================================
# OBJECT STORAGE CONFIGURATION
# ==============================================================================

# Storage type: s3, minio, gcs, azure
STORAGE_TYPE=s3

# S3/MinIO configuration
S3_ENDPOINT_URL=http://localhost:9000
S3_ACCESS_KEY_ID=minioadmin
S3_SECRET_ACCESS_KEY=changeme_in_production
S3_BUCKET_NAME=ml-models
S3_REGION=us-west-2

# For AWS S3, leave S3_ENDPOINT_URL empty and set:
# AWS_ACCESS_KEY_ID=your_access_key
# AWS_SECRET_ACCESS_KEY=your_secret_key

# ==============================================================================
# AUTHENTICATION & SECURITY
# ==============================================================================

# API Keys (comma-separated for multiple keys)
# IMPORTANT: Change these in production!
API_KEYS=dev-test-key-123,dev-admin-key-456

# API key header name
API_KEY_HEADER=X-API-Key

# Enable authentication
AUTHENTICATION_ENABLED=true

# CORS settings
CORS_ENABLED=true
CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# ==============================================================================
# MONITORING & OBSERVABILITY
# ==============================================================================

# Prometheus metrics
METRICS_ENABLED=true
METRICS_PATH=/metrics
METRICS_PORT=5000

# Distributed tracing (optional)
TRACING_ENABLED=false
JAEGER_AGENT_HOST=localhost
JAEGER_AGENT_PORT=6831

# Application Performance Monitoring (optional)
APM_ENABLED=false
APM_SERVICE_NAME=ml-api
APM_SERVER_URL=http://localhost:8200

# ==============================================================================
# PERFORMANCE CONFIGURATION
# ==============================================================================

# Request timeout (seconds)
REQUEST_TIMEOUT=30

# Model inference timeout (seconds)
INFERENCE_TIMEOUT=10

# Max file upload size (bytes) - 10MB
MAX_FILE_SIZE=10485760

# Worker configuration (for Gunicorn)
WORKERS=4
WORKER_CLASS=sync
WORKER_TIMEOUT=120
WORKER_CONNECTIONS=1000

# Caching
CACHE_ENABLED=true
CACHE_TTL_SECONDS=3600
CACHE_MAX_SIZE=1000

# ==============================================================================
# RATE LIMITING
# ==============================================================================

# Global rate limit
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=100

# Per-endpoint rate limits
PREDICT_RATE_LIMIT_PER_MINUTE=10
HEALTH_RATE_LIMIT_PER_MINUTE=60

# ==============================================================================
# KUBERNETES CONFIGURATION (for in-cluster applications)
# ==============================================================================

# Kubernetes namespace
K8S_NAMESPACE=ml-system-development

# Service account
K8S_SERVICE_ACCOUNT=ml-api-sa

# Pod name (auto-populated by Kubernetes)
# POD_NAME=${POD_NAME}

# Node name (auto-populated by Kubernetes)
# NODE_NAME=${NODE_NAME}

# ==============================================================================
# FEATURE FLAGS
# ==============================================================================

# Enable experimental features
ENABLE_EXPERIMENTAL_FEATURES=false

# Enable A/B testing
ENABLE_AB_TESTING=false

# Enable model warm-up on startup
ENABLE_MODEL_WARMUP=true

# Enable response caching
ENABLE_RESPONSE_CACHE=false

# ==============================================================================
# DEVELOPMENT-SPECIFIC SETTINGS
# ==============================================================================
# These settings should only be used in development

# Enable debug mode (DO NOT use in production!)
DEBUG=false

# Enable auto-reload (development only)
AUTO_RELOAD=false

# Enable profiling
ENABLE_PROFILING=false

# Mock external services (for testing)
MOCK_MLFLOW=false
MOCK_DATABASE=false

# ==============================================================================
# STAGING-SPECIFIC SETTINGS
# ==============================================================================
# Uncomment and set for staging environment

# ENVIRONMENT=staging
# LOG_LEVEL=INFO
# MODEL_VERSION=staging
# MLFLOW_TRACKING_URI=https://mlflow-staging.example.com
# DB_HOST=postgres-staging.example.com
# S3_BUCKET_NAME=ml-models-staging

# ==============================================================================
# PRODUCTION-SPECIFIC SETTINGS
# ==============================================================================
# Uncomment and set for production environment

# ENVIRONMENT=production
# LOG_LEVEL=WARN
# MODEL_VERSION=production
# MLFLOW_TRACKING_URI=https://mlflow.example.com
# DB_HOST=postgres.example.com
# S3_BUCKET_NAME=ml-models-production

# IMPORTANT PRODUCTION SECURITY SETTINGS:
# - Change all default passwords and API keys
# - Use strong, randomly generated credentials
# - Store secrets in Kubernetes Secrets or HashiCorp Vault
# - Never commit production credentials to Git
# - Rotate credentials regularly
# - Enable all security features (authentication, rate limiting, etc.)

# ==============================================================================
# EXAMPLE ENVIRONMENT-SPECIFIC FILES
# ==============================================================================

# .env.development example:
# ENVIRONMENT=development
# LOG_LEVEL=DEBUG
# DEBUG=true
# MLFLOW_TRACKING_URI=http://localhost:5000
# DB_PASSWORD=dev_password
# API_KEYS=dev-key-123

# .env.staging example:
# ENVIRONMENT=staging
# LOG_LEVEL=INFO
# DEBUG=false
# MLFLOW_TRACKING_URI=https://mlflow-staging.example.com
# DB_PASSWORD=staging_secure_password_here
# API_KEYS=staging-key-from-secrets

# .env.production example:
# ENVIRONMENT=production
# LOG_LEVEL=WARN
# DEBUG=false
# MLFLOW_TRACKING_URI=https://mlflow.example.com
# DB_PASSWORD=production_highly_secure_password
# API_KEYS=production-key-from-vault

# ==============================================================================
# USAGE INSTRUCTIONS
# ==============================================================================

# 1. Copy this file:
#    cp .env.example .env.development

# 2. Edit .env.development with your local settings

# 3. Load environment variables:
#    For Bash/Zsh:
#      export $(cat .env.development | xargs)
#    Or use python-dotenv:
#      from dotenv import load_dotenv
#      load_dotenv('.env.development')

# 4. For Docker:
#    docker run --env-file .env.development your-image

# 5. For docker-compose:
#    Add to docker-compose.yml:
#      services:
#        app:
#          env_file: .env.development

# 6. For Kubernetes:
#    Create ConfigMap from .env:
#      kubectl create configmap app-config --from-env-file=.env.development
#    Or use external secrets management (recommended for production)

# ==============================================================================
# SECURITY BEST PRACTICES
# ==============================================================================

# ✅ DO:
# - Use this template to create environment-specific .env files
# - Store production secrets in a secret manager (Vault, AWS Secrets Manager)
# - Use different credentials for each environment
# - Rotate credentials regularly
# - Use strong, randomly generated passwords
# - Enable authentication and rate limiting
# - Review and audit environment variables regularly

# ❌ DON'T:
# - Commit .env files to Git (add to .gitignore)
# - Use the same credentials across environments
# - Hard-code secrets in application code
# - Share production credentials via email or Slack
# - Use weak or default passwords
# - Leave debug mode enabled in production
# - Expose sensitive configuration in logs

# ==============================================================================
# TROUBLESHOOTING
# ==============================================================================

# If environment variables aren't loading:
# 1. Check file location (.env should be in project root)
# 2. Verify no syntax errors (no spaces around = sign)
# 3. Check file encoding (should be UTF-8)
# 4. Restart application after changing .env
# 5. Check if application is configured to load .env files

# If secrets aren't working:
# 1. Verify secret values are correct (no trailing spaces)
# 2. Check secret management system (Vault, K8s Secrets)
# 3. Verify application has permission to access secrets
# 4. Check secret encoding (base64 for K8s Secrets)

# ==============================================================================
# ADDITIONAL NOTES
# ==============================================================================

# - Environment variables override values in this file
# - Boolean values: use "true" or "false" (lowercase)
# - Numeric values: no quotes needed
# - String values: quotes optional unless containing special characters
# - Comments: use # at beginning of line
# - Empty values: leave blank or use "" (depends on your parser)

# For more information, see:
# - Project documentation: docs/CONFIGURATION.md
# - Twelve-Factor App methodology: https://12factor.net/config
# - Docker environment variables: https://docs.docker.com/compose/environment-variables/
