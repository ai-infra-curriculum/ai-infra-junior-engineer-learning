# Environment Configuration Template
#
# This file serves as a template for environment-specific configuration.
# Copy this file to .env and fill in actual values.
#
# Usage:
#   1. cp .env.example .env
#   2. Edit .env with your values
#   3. Add .env to .gitignore (NEVER commit .env to Git!)
#   4. Load in application or Docker Compose

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================

# Model Configuration
# Which ML model to load on startup
MODEL_NAME=resnet50

# Alternative models for testing:
# MODEL_NAME=mobilenet_v2
# MODEL_NAME=bert-base-uncased
# MODEL_NAME=gpt2

# Logging Configuration
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Inference Configuration
# Maximum batch size for model predictions
MAX_BATCH_SIZE=32

# Request timeout (seconds)
REQUEST_TIMEOUT=60

# Application port (Flask default)
PORT=5000

# ============================================================================
# KUBERNETES CONFIGURATION
# ============================================================================

# Namespace for deployment
K8S_NAMESPACE=ml-serving

# Image registry and tag
# For local testing: model-api:v1.0
# For cloud: <registry-url>/model-api:v1.0
DOCKER_IMAGE=model-api:v1.0

# Image pull policy
# Options: Always, IfNotPresent, Never
IMAGE_PULL_POLICY=IfNotPresent

# ============================================================================
# RESOURCE CONFIGURATION
# ============================================================================

# CPU Resources (in millicores, 1000m = 1 core)
CPU_REQUEST=500m
CPU_LIMIT=1000m

# Memory Resources (in Mi/Gi)
MEMORY_REQUEST=1Gi
MEMORY_LIMIT=2Gi

# ============================================================================
# SCALING CONFIGURATION
# ============================================================================

# Replica counts
MIN_REPLICAS=3
MAX_REPLICAS=10

# Auto-scaling targets (percentage)
TARGET_CPU_UTILIZATION=70
TARGET_MEMORY_UTILIZATION=80

# ============================================================================
# NETWORKING CONFIGURATION
# ============================================================================

# Service configuration
SERVICE_TYPE=LoadBalancer
SERVICE_PORT=80
SERVICE_TARGET_PORT=5000

# Ingress configuration
INGRESS_ENABLED=true
INGRESS_HOST=model-api.example.com
INGRESS_CLASS=nginx

# TLS/SSL configuration
TLS_ENABLED=false
TLS_SECRET_NAME=model-api-tls

# ============================================================================
# MONITORING CONFIGURATION
# ============================================================================

# Prometheus configuration
PROMETHEUS_SCRAPE=true
PROMETHEUS_PORT=5000
PROMETHEUS_PATH=/metrics
PROMETHEUS_INTERVAL=30s

# Grafana configuration
GRAFANA_DASHBOARD_ENABLED=true

# ============================================================================
# EXTERNAL SERVICES (if needed)
# ============================================================================

# Database (example - not used in basic project)
# DB_HOST=postgres.default.svc.cluster.local
# DB_PORT=5432
# DB_NAME=models
# DB_USER=model_user
# DB_PASSWORD_SECRET=db-password  # Reference to K8s Secret

# Redis cache (example - not used in basic project)
# REDIS_HOST=redis.default.svc.cluster.local
# REDIS_PORT=6379
# REDIS_PASSWORD_SECRET=redis-password  # Reference to K8s Secret

# Model storage (example - for downloading models)
# MODEL_STORAGE_URL=https://storage.googleapis.com/my-bucket/models
# MODEL_STORAGE_TYPE=gcs  # Options: gcs, s3, azure, http

# ============================================================================
# CLOUD PROVIDER CONFIGURATION
# ============================================================================

# AWS Configuration (if using EKS)
# AWS_REGION=us-west-2
# AWS_ACCOUNT_ID=123456789012
# ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

# GCP Configuration (if using GKE)
# GCP_PROJECT_ID=my-project
# GCP_REGION=us-central1
# GCR_REGISTRY=gcr.io/${GCP_PROJECT_ID}

# Azure Configuration (if using AKS)
# AZURE_SUBSCRIPTION_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
# AZURE_RESOURCE_GROUP=ml-serving-rg
# ACR_REGISTRY=myregistry.azurecr.io

# ============================================================================
# DEVELOPMENT CONFIGURATION
# ============================================================================

# Flask debug mode (NEVER enable in production!)
FLASK_DEBUG=false
FLASK_ENV=production

# Development overrides (uncomment for local development)
# LOG_LEVEL=DEBUG
# MODEL_NAME=tiny-model  # Faster loading for development
# MAX_BATCH_SIZE=8       # Smaller batches for testing

# ============================================================================
# MINIKUBE / LOCAL CONFIGURATION
# ============================================================================

# For local Minikube testing
# SERVICE_TYPE=NodePort
# INGRESS_HOST=model-api.local

# Minikube resource limits (for starting cluster)
# MINIKUBE_CPUS=4
# MINIKUBE_MEMORY=8192  # MB
# MINIKUBE_DRIVER=docker

# ============================================================================
# CI/CD CONFIGURATION
# ============================================================================

# CI/CD environment indicator
# CI=true
# CI_COMMIT_SHA=abc123def456
# CI_COMMIT_REF_NAME=main

# Image tagging for CI/CD
# IMAGE_TAG=${CI_COMMIT_SHA}
# IMAGE_REGISTRY=${ECR_REGISTRY}

# ============================================================================
# FEATURE FLAGS
# ============================================================================

# Enable/disable features
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true
ENABLE_AUTHENTICATION=false
ENABLE_RATE_LIMITING=false

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Security settings
# API_KEY_SECRET=api-key  # Reference to K8s Secret
# JWT_SECRET=jwt-secret   # Reference to K8s Secret

# CORS configuration (if serving browser clients)
# CORS_ENABLED=false
# CORS_ORIGINS=http://localhost:3000,https://app.example.com

# ============================================================================
# NOTES
# ============================================================================

# Environment-Specific Files:
# - .env.development - Local development settings
# - .env.staging - Staging environment
# - .env.production - Production environment

# Never commit these files to Git!
# Add to .gitignore:
#   .env
#   .env.local
#   .env.*.local

# Loading .env in Python:
#   from dotenv import load_dotenv
#   load_dotenv()  # Loads .env file
#   model_name = os.getenv('MODEL_NAME', 'resnet50')

# Loading .env in Docker Compose:
#   services:
#     app:
#       env_file:
#         - .env

# Loading .env in Kubernetes:
#   Use ConfigMap and Secrets instead of .env file
#   This file helps during local development and testing

# ============================================================================
# VALIDATION
# ============================================================================

# After creating .env, validate it:
# 1. Check all required variables are set
# 2. Verify values are appropriate for environment
# 3. Test application starts successfully
# 4. Check logs for configuration errors

# Example validation script:
# #!/bin/bash
# set -a
# source .env
# set +a
#
# required_vars=("MODEL_NAME" "LOG_LEVEL" "PORT")
# for var in "${required_vars[@]}"; do
#   if [ -z "${!var}" ]; then
#     echo "Error: $var is not set"
#     exit 1
#   fi
# done
# echo "All required variables are set"
