# Environment Variables for Monitoring Stack
#
# This file contains configuration for all monitoring services.
# Copy this file to .env and customize values for your environment.
#
# Usage:
#   cp .env.example .env
#   vim .env  # Edit with your values
#   docker-compose up -d
#
# Learning Objectives:
# - Understand environment-based configuration
# - Manage secrets securely
# - Configure services via environment variables

# =============================================================================
# General Settings
# =============================================================================

# TODO: Set environment name
# Options: development, staging, production
# ENVIRONMENT=development

# TODO: Set service name
# This appears in logs and metrics labels
# SERVICE_NAME=ml-api

# TODO: Set log level
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# LOG_LEVEL=INFO


# =============================================================================
# Grafana Configuration
# =============================================================================

# TODO: Set Grafana admin credentials
# WARNING: Change these from defaults before production!
# GRAFANA_ADMIN_USER=admin
# GRAFANA_ADMIN_PASSWORD=admin123

# TODO: Set Grafana server URL
# Used for external links in alerts
# GRAFANA_SERVER_URL=http://localhost:3000


# =============================================================================
# Elasticsearch Configuration
# =============================================================================

# TODO: Set Elasticsearch credentials
# If xpack.security.enabled=true
# ELASTIC_USERNAME=elastic
# ELASTIC_PASSWORD=changeme

# TODO: Set Elasticsearch JVM heap size
# Recommendation: 50% of available RAM, max 32GB
# Format: -Xms<size> -Xmx<size>
# ES_JAVA_OPTS=-Xms512m -Xmx512m

# TODO: Set Elasticsearch cluster name
# ES_CLUSTER_NAME=ml-monitoring-cluster


# =============================================================================
# Logstash Configuration
# =============================================================================

# TODO: Set Logstash JVM heap size
# Typically smaller than Elasticsearch
# LS_JAVA_OPTS=-Xms256m -Xmx256m

# TODO: Set Elasticsearch hosts for Logstash
# ELASTICSEARCH_HOSTS=http://elasticsearch:9200


# =============================================================================
# Prometheus Configuration
# =============================================================================

# TODO: Set Prometheus retention time
# How long to keep metrics
# PROMETHEUS_RETENTION_TIME=30d

# TODO: Set Prometheus retention size
# Max storage size for metrics
# PROMETHEUS_RETENTION_SIZE=10GB

# TODO: Set Prometheus scrape interval
# How often to collect metrics
# PROMETHEUS_SCRAPE_INTERVAL=15s


# =============================================================================
# Alertmanager Configuration
# =============================================================================

# TODO: Set Slack webhook URL for alerts
# Get this from Slack: https://api.slack.com/messaging/webhooks
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# TODO: Set Slack channel for alerts
# SLACK_CHANNEL=#alerts

# TODO: Set email configuration for alerts
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@example.com
# SMTP_PASSWORD=your-app-password
# SMTP_FROM=alerts@example.com
# SMTP_TO=team@example.com

# TODO: Set PagerDuty integration key
# Get this from PagerDuty service settings
# PAGERDUTY_SERVICE_KEY=your-pagerduty-integration-key


# =============================================================================
# ML Application Configuration
# =============================================================================

# TODO: Set model configuration
# MODEL_NAME=resnet50
# MODEL_VERSION=v1.2.0
# MODEL_PATH=/models/resnet50.pth

# TODO: Set inference configuration
# BATCH_SIZE=32
# MAX_BATCH_WAIT_MS=100
# GPU_DEVICE=0

# TODO: Set API configuration
# API_HOST=0.0.0.0
# API_PORT=5000
# API_WORKERS=4


# =============================================================================
# Monitoring Thresholds
# =============================================================================

# TODO: Set alert thresholds
# These control when alerts fire

# Infrastructure thresholds
# CPU_THRESHOLD_WARNING=80
# CPU_THRESHOLD_CRITICAL=95
# MEMORY_THRESHOLD_WARNING=85
# MEMORY_THRESHOLD_CRITICAL=95
# DISK_THRESHOLD_WARNING=80
# DISK_THRESHOLD_CRITICAL=90

# Application thresholds
# ERROR_RATE_THRESHOLD=0.05  # 5% error rate
# LATENCY_P95_THRESHOLD=1.0  # 1 second
# LATENCY_P99_THRESHOLD=5.0  # 5 seconds

# ML model thresholds
# MODEL_ACCURACY_THRESHOLD=0.85
# DRIFT_SCORE_THRESHOLD=0.5
# INFERENCE_LATENCY_P99_THRESHOLD=0.5  # 500ms
# LOW_CONFIDENCE_THRESHOLD=0.7


# =============================================================================
# Feature Flags
# =============================================================================

# TODO: Enable/disable monitoring features
# Useful for gradual rollout

# Enable metrics collection
# ENABLE_METRICS=true

# Enable log shipping
# ENABLE_LOGGING=true

# Enable alerting
# ENABLE_ALERTING=true

# Enable drift detection
# ENABLE_DRIFT_DETECTION=true

# Enable performance monitoring
# ENABLE_PERFORMANCE_MONITORING=true


# =============================================================================
# Development Settings
# =============================================================================

# TODO: Development-specific settings
# Only used in development environment

# Enable debug mode
# DEBUG=false

# Mock external services
# MOCK_EXTERNAL_SERVICES=false

# Use local storage instead of cloud
# USE_LOCAL_STORAGE=true


# =============================================================================
# Cloud Provider Settings (Optional)
# =============================================================================

# TODO: AWS settings (if using AWS services)
# AWS_REGION=us-west-2
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_S3_BUCKET=ml-logs-backup

# TODO: GCP settings (if using GCP services)
# GCP_PROJECT_ID=your-project-id
# GCP_REGION=us-central1
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/credentials.json

# TODO: Azure settings (if using Azure services)
# AZURE_SUBSCRIPTION_ID=your-subscription-id
# AZURE_RESOURCE_GROUP=ml-monitoring
# AZURE_STORAGE_ACCOUNT=mllogsstorage


# =============================================================================
# Security Settings
# =============================================================================

# TODO: Set security configurations

# API authentication
# API_KEY=your-secret-api-key
# JWT_SECRET=your-jwt-secret

# TLS/SSL configuration
# TLS_ENABLED=false
# TLS_CERT_PATH=/certs/server.crt
# TLS_KEY_PATH=/certs/server.key


# =============================================================================
# Advanced Configuration
# =============================================================================

# TODO: Set advanced options

# Metrics cardinality limit
# Prevents metrics explosion from high-cardinality labels
# MAX_METRIC_CARDINALITY=10000

# Log sampling rate
# Sample logs to reduce volume (1.0 = 100%, 0.1 = 10%)
# LOG_SAMPLING_RATE=1.0

# Metrics export interval
# How often to push metrics to remote storage
# METRICS_EXPORT_INTERVAL_SECONDS=60


# =============================================================================
# Notes & Best Practices
# =============================================================================

# 1. Never commit .env file to version control!
#    Add .env to .gitignore

# 2. Use different .env files for different environments:
#    .env.development
#    .env.staging
#    .env.production

# 3. Use secrets management in production:
#    - AWS Secrets Manager
#    - HashiCorp Vault
#    - Kubernetes Secrets
#    - Docker Secrets

# 4. Validate environment variables on startup:
#    - Check required variables are set
#    - Validate format (URLs, numbers, etc.)
#    - Provide clear error messages

# 5. Document all variables:
#    - What they control
#    - Valid values/format
#    - Default values
#    - Impact of changing them

# 6. Use strong passwords:
#    - At least 16 characters
#    - Mix of letters, numbers, symbols
#    - Don't use default passwords
#    - Rotate regularly

# 7. Separate secrets from config:
#    - Secrets: passwords, API keys (never in code)
#    - Config: thresholds, URLs (can be in code)

# 8. Use environment-specific defaults:
#    - Development: verbose logging, low retention
#    - Production: minimal logging, long retention


# =============================================================================
# Example: Loading Environment Variables in Python
# =============================================================================

# import os
# from dotenv import load_dotenv
#
# # Load .env file
# load_dotenv()
#
# # Get values with defaults
# environment = os.getenv('ENVIRONMENT', 'development')
# log_level = os.getenv('LOG_LEVEL', 'INFO')
# grafana_url = os.getenv('GRAFANA_SERVER_URL', 'http://localhost:3000')
#
# # Validate required variables
# api_key = os.getenv('API_KEY')
# if not api_key:
#     raise ValueError("API_KEY environment variable is required")
#
# # Type conversion
# cpu_threshold = float(os.getenv('CPU_THRESHOLD_WARNING', '80'))
# enable_metrics = os.getenv('ENABLE_METRICS', 'true').lower() == 'true'


# =============================================================================
# Example: Using with Docker Compose
# =============================================================================

# Docker Compose automatically loads .env file in the same directory
#
# In docker-compose.yml:
# services:
#   ml-api:
#     environment:
#       - LOG_LEVEL=${LOG_LEVEL}
#       - API_KEY=${API_KEY}
#       - MODEL_NAME=${MODEL_NAME}
#
# Or use env_file directive:
# services:
#   ml-api:
#     env_file:
#       - .env
#       - .env.local  # Override with local settings


# =============================================================================
# Template Completed
# =============================================================================

# TODO: Copy this file to .env and fill in your values
# cp .env.example .env

# TODO: Update .gitignore to exclude .env
# echo ".env" >> .gitignore

# TODO: Create environment-specific files
# cp .env.example .env.development
# cp .env.example .env.production
